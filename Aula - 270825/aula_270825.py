# -*- coding: utf-8 -*-
"""Aula 270825.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LE_PRerx_qdBctn34-yrShTg2-MpRSNT
"""

import numpy as np
import matplotlib.pyplot as plt

"""**Gerando dados simulando uma distribuição normal**"""

mu, sigma = 0, 0.1 #Média e desvio padrão

dados = np.random.normal(mu, sigma, 1000)
print(dados)

plt.figure(figsize=(8,6))
plt.hist(dados, bins=20, density=True, alpha=0.6, color='g')

"""**Histograma + Distribuição**"""

xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = np.exp(-((x-mu) ** 2)/ (2 * sigma ** 2)/ (sigma * np.sqrt(2 * np.pi)))
plt.plot(x, p, 'k', linewidth=2)
plt.show()

#Criando a linha de distribuição

plt.figure(figsize=(8,6))
plt.hist(dados, bins=20, density=True, alpha=0.6, color='g')

xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = np.exp(-((x-mu) ** 2)/ (2 * sigma ** 2)/ (sigma * np.sqrt(2 * np.pi)))
plt.plot(x, p, 'k', linewidth=2)
plt.show()

#Criando a linha de distribuição

plt.figure(figsize=(8,6))
plt.hist(dados, bins=10, density=True, alpha=0.6, color='g')

xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
# p = np.exp(-((x-mu) ** 2)/ (2 * sigma ** 2)/ (sigma * np.sqrt(2 * np.pi)))
p = (1/(sigma * np.sqrt(2 * np.pi))) * np.exp(-((x - mu)**2) / (2 * sigma **2))
plt.plot(x, p, 'k', linewidth=2)

title = "Histograma de uma Distribuição Normal"
plt.title(title)
plt.xlabel("Valores")
plt.ylabel("Densidade de Probabilidade")
plt.show()

